{
    "sourceFile": "cmd/api/main.go",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 57,
            "patches": [
                {
                    "date": 1738530134384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738530145239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,7 @@\n-package main\n\\ No newline at end of file\n+package main\n+\n+import \"fmt\"\n+\n+func main() {\n+\tfmt.Println(\"Hello World\")\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738530742466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n package main\n \n import \"fmt\"\n \n+const version = \"1.0.0\"\n+\n func main() {\n \tfmt.Println(\"Hello World\")\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738530765967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,7 +3,12 @@\n import \"fmt\"\n \n const version = \"1.0.0\"\n \n+type config struct {\n+\tport int \n+\tenv string\n+}\n+\n func main() {\n \tfmt.Println(\"Hello World\")\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738530783867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,7 +8,11 @@\n \tport int \n \tenv string\n }\n \n+type application struct {\n+\t\n+}\n+\n func main() {\n \tfmt.Println(\"Hello World\")\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738530794412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,10 @@\n package main\n \n-import \"fmt\"\n+import (\n+\t\"fmt\"\n+\t\"log/slog\"\n+)\n \n const version = \"1.0.0\"\n \n type config struct {\n@@ -9,9 +12,10 @@\n \tenv string\n }\n \n type application struct {\n-\t\n+\tconfig config \n+\tlogger *slog.Logger\n }\n \n func main() {\n \tfmt.Println(\"Hello World\")\n"
                },
                {
                    "date": 1738530805006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,6 +17,7 @@\n \tlogger *slog.Logger\n }\n \n func main() {\n+\tvar cfg config\n \tfmt.Println(\"Hello World\")\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738530837908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n package main\n \n import (\n+\t\"flag\"\n \t\"fmt\"\n \t\"log/slog\"\n )\n \n@@ -18,6 +19,7 @@\n }\n \n func main() {\n \tvar cfg config\n+\tflag.IntVar(&cfg.port, \"port\")\n \tfmt.Println(\"Hello World\")\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738530845155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,7 +19,7 @@\n }\n \n func main() {\n \tvar cfg config\n-\tflag.IntVar(&cfg.port, \"port\")\n+\tflag.IntVar(&cfg.port, \"port\", 4000, \"API Server Port\")\n \tfmt.Println(\"Hello World\")\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738530867739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,6 +20,7 @@\n \n func main() {\n \tvar cfg config\n \tflag.IntVar(&cfg.port, \"port\", 4000, \"API Server Port\")\n+\tflag.StringVar(&cfg.env, \"env\", \"environment\")\n \tfmt.Println(\"Hello World\")\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738530882398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,7 +20,7 @@\n \n func main() {\n \tvar cfg config\n \tflag.IntVar(&cfg.port, \"port\", 4000, \"API Server Port\")\n-\tflag.StringVar(&cfg.env, \"env\", \"environment\")\n+\tflag.StringVar(&cfg.env, \"env\", \"environment\", \"Environment (development|staging|production)\")\n \tfmt.Println(\"Hello World\")\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738530893553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,6 +21,8 @@\n func main() {\n \tvar cfg config\n \tflag.IntVar(&cfg.port, \"port\", 4000, \"API Server Port\")\n \tflag.StringVar(&cfg.env, \"env\", \"environment\", \"Environment (development|staging|production)\")\n+\n+\tflag.Parse()\n \tfmt.Println(\"Hello World\")\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738530941125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import (\n \t\"flag\"\n \t\"fmt\"\n \t\"log/slog\"\n+\t\"os\"\n )\n \n const version = \"1.0.0\"\n \n@@ -21,8 +22,9 @@\n func main() {\n \tvar cfg config\n \tflag.IntVar(&cfg.port, \"port\", 4000, \"API Server Port\")\n \tflag.StringVar(&cfg.env, \"env\", \"environment\", \"Environment (development|staging|production)\")\n+\tflag.Parse() \n \n-\tflag.Parse()\n+\tlogger := slog.New(slog.NewTextHandler(os.Stdout, nil))\n \tfmt.Println(\"Hello World\")\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738530947218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,7 @@\n \tvar cfg config\n \tflag.IntVar(&cfg.port, \"port\", 4000, \"API Server Port\")\n \tflag.StringVar(&cfg.env, \"env\", \"environment\", \"Environment (development|staging|production)\")\n \tflag.Parse() \n-\n \tlogger := slog.New(slog.NewTextHandler(os.Stdout, nil))\n \tfmt.Println(\"Hello World\")\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738530955662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n package main\n \n import (\n \t\"flag\"\n-\t\"fmt\"\n \t\"log/slog\"\n \t\"os\"\n )\n \n@@ -24,6 +23,5 @@\n \tflag.IntVar(&cfg.port, \"port\", 4000, \"API Server Port\")\n \tflag.StringVar(&cfg.env, \"env\", \"environment\", \"Environment (development|staging|production)\")\n \tflag.Parse() \n \tlogger := slog.New(slog.NewTextHandler(os.Stdout, nil))\n-\tfmt.Println(\"Hello World\")\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738530961559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,5 +23,6 @@\n \tflag.IntVar(&cfg.port, \"port\", 4000, \"API Server Port\")\n \tflag.StringVar(&cfg.env, \"env\", \"environment\", \"Environment (development|staging|production)\")\n \tflag.Parse() \n \tlogger := slog.New(slog.NewTextHandler(os.Stdout, nil))\n+\tapp := &application{}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738530969558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,6 +23,9 @@\n \tflag.IntVar(&cfg.port, \"port\", 4000, \"API Server Port\")\n \tflag.StringVar(&cfg.env, \"env\", \"environment\", \"Environment (development|staging|production)\")\n \tflag.Parse() \n \tlogger := slog.New(slog.NewTextHandler(os.Stdout, nil))\n-\tapp := &application{}\n+\tapp := &application{\n+\t\tconfig: cfg,\n+\t\tlogger: logger,\n+\t}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738531046370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \n import (\n \t\"flag\"\n \t\"log/slog\"\n+\t\"net/http\"\n \t\"os\"\n )\n \n const version = \"1.0.0\"\n@@ -27,5 +28,7 @@\n \tapp := &application{\n \t\tconfig: cfg,\n \t\tlogger: logger,\n \t}\n+\n+\tmux := http.NewServeMux()\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738531056743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,5 +30,6 @@\n \t\tlogger: logger,\n \t}\n \n \tmux := http.NewServeMux()\n+\tmux.HandleFunc(\"/v1/healthcheck\")\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738531064041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,6 +30,6 @@\n \t\tlogger: logger,\n \t}\n \n \tmux := http.NewServeMux()\n-\tmux.HandleFunc(\"/v1/healthcheck\")\n+\tmux.HandleFunc(\"/v1/healthcheck\", app.healthcheckHandler)\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738531071568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,5 +31,9 @@\n \t}\n \n \tmux := http.NewServeMux()\n \tmux.HandleFunc(\"/v1/healthcheck\", app.healthcheckHandler)\n+\n+\tsrv := &http.Server{\n+\t\t\n+\t}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738531098478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n package main\n \n import (\n \t\"flag\"\n+\t\"fmt\"\n \t\"log/slog\"\n \t\"net/http\"\n \t\"os\"\n )\n@@ -33,7 +34,7 @@\n \tmux := http.NewServeMux()\n \tmux.HandleFunc(\"/v1/healthcheck\", app.healthcheckHandler)\n \n \tsrv := &http.Server{\n-\t\t\n+\t\tAddr: fmt.Sprintf(\":%d\"),\n \t}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738531104822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,7 +34,8 @@\n \tmux := http.NewServeMux()\n \tmux.HandleFunc(\"/v1/healthcheck\", app.healthcheckHandler)\n \n \tsrv := &http.Server{\n-\t\tAddr: fmt.Sprintf(\":%d\"),\n+\t\tAddr: fmt.Sprintf(\":%d\", cfg.port),\n+\t\tHandler: mux,\n \t}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738531110330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n \t\"fmt\"\n \t\"log/slog\"\n \t\"net/http\"\n \t\"os\"\n+\t\"time\"\n )\n \n const version = \"1.0.0\"\n \n@@ -36,6 +37,7 @@\n \n \tsrv := &http.Server{\n \t\tAddr: fmt.Sprintf(\":%d\", cfg.port),\n \t\tHandler: mux,\n+\t\tIdleTimeout: time.Minute,\n \t}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738531142595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,6 +38,8 @@\n \tsrv := &http.Server{\n \t\tAddr: fmt.Sprintf(\":%d\", cfg.port),\n \t\tHandler: mux,\n \t\tIdleTimeout: time.Minute,\n+\t\tReadTimeout: 5 * time.Second,\n+\t\tWriteTimeout: 10 * time.Second,\n \t}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738531147627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+package main\n+\n+import (\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"log/slog\"\n+\t\"net/http\"\n+\t\"os\"\n+\t\"time\"\n+)\n+\n+const version = \"1.0.0\"\n+\n+type config struct {\n+\tport int \n+\tenv string\n+}\n+\n+type application struct {\n+\tconfig config \n+\tlogger *slog.Logger\n+}\n+\n+func main() {\n+\tvar cfg config\n+\tflag.IntVar(&cfg.port, \"port\", 4000, \"API Server Port\")\n+\tflag.StringVar(&cfg.env, \"env\", \"environment\", \"Environment (development|staging|production)\")\n+\tflag.Parse() \n+\tlogger := slog.New(slog.NewTextHandler(os.Stdout, nil))\n+\tapp := &application{\n+\t\tconfig: cfg,\n+\t\tlogger: logger,\n+\t}\n+\n+\tmux := http.NewServeMux()\n+\tmux.HandleFunc(\"/v1/healthcheck\", app.healthcheckHandler)\n+\n+\tsrv := &http.Server{\n+\t\tAddr: fmt.Sprintf(\":%d\", cfg.port),\n+\t\tHandler: mux,\n+\t\tIdleTimeout: time.Minute,\n+\t\tReadTimeout: 5 * time.Second,\n+\t\tWriteTimeout: 10 * time.Second,\n+\t\tErrorLog: slog.NewLogLogger(),\n+\t}\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738531159911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,52 +40,9 @@\n \t\tHandler: mux,\n \t\tIdleTimeout: time.Minute,\n \t\tReadTimeout: 5 * time.Second,\n \t\tWriteTimeout: 10 * time.Second,\n-\t\tErrorLog: slog.NewLogLogger(),\n+\t\tErrorLog: slog.NewLogLogger(logger.Handler(), slog.LevelError),\n \t}\n-}\n-package main\n \n-import (\n-\t\"flag\"\n-\t\"fmt\"\n-\t\"log/slog\"\n-\t\"net/http\"\n-\t\"os\"\n-\t\"time\"\n-)\n-\n-const version = \"1.0.0\"\n-\n-type config struct {\n-\tport int \n-\tenv string\n-}\n-\n-type application struct {\n-\tconfig config \n-\tlogger *slog.Logger\n-}\n-\n-func main() {\n-\tvar cfg config\n-\tflag.IntVar(&cfg.port, \"port\", 4000, \"API Server Port\")\n-\tflag.StringVar(&cfg.env, \"env\", \"environment\", \"Environment (development|staging|production)\")\n-\tflag.Parse() \n-\tlogger := slog.New(slog.NewTextHandler(os.Stdout, nil))\n-\tapp := &application{\n-\t\tconfig: cfg,\n-\t\tlogger: logger,\n-\t}\n-\n-\tmux := http.NewServeMux()\n-\tmux.HandleFunc(\"/v1/healthcheck\", app.healthcheckHandler)\n-\n-\tsrv := &http.Server{\n-\t\tAddr: fmt.Sprintf(\":%d\", cfg.port),\n-\t\tHandler: mux,\n-\t\tIdleTimeout: time.Minute,\n-\t\tReadTimeout: 5 * time.Second,\n-\t\tWriteTimeout: 10 * time.Second,\n-\t}\n+\tlogger.Info()\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738531168890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,6 +43,6 @@\n \t\tWriteTimeout: 10 * time.Second,\n \t\tErrorLog: slog.NewLogLogger(logger.Handler(), slog.LevelError),\n \t}\n \n-\tlogger.Info()\n+\tlogger.Info(\"starting server\", \"addr\", srv.Addr)\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738531205968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,6 +43,8 @@\n \t\tWriteTimeout: 10 * time.Second,\n \t\tErrorLog: slog.NewLogLogger(logger.Handler(), slog.LevelError),\n \t}\n \n-\tlogger.Info(\"starting server\", \"addr\", srv.Addr)\n+\tlogger.Info(\"starting server\", \"addr\", srv.Addr, \"env\", cfg.env)\n+\n+\terr := srv.ListenAndServe()\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738531214172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,5 +46,7 @@\n \n \tlogger.Info(\"starting server\", \"addr\", srv.Addr, \"env\", cfg.env)\n \n \terr := srv.ListenAndServe()\n+\tlogger.Error(err.Error())\n+\tos.Exit(1)\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738531227836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n }\n \n func main() {\n \tvar cfg config\n-\tflag.IntVar(&cfg.port, \"port\", 4000, \"API Server Port\")\n+\tflag.IntVar(&cfg.port, \"port\", 8000, \"API Server Port\")\n \tflag.StringVar(&cfg.env, \"env\", \"environment\", \"Environment (development|staging|production)\")\n \tflag.Parse() \n \tlogger := slog.New(slog.NewTextHandler(os.Stdout, nil))\n \tapp := &application{\n"
                },
                {
                    "date": 1738531367775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n }\n \n func main() {\n \tvar cfg config\n-\tflag.IntVar(&cfg.port, \"port\", 8000, \"API Server Port\")\n+\tflag.IntVar(&cfg.port, \"port\", 4000, \"API Server Port\")\n \tflag.StringVar(&cfg.env, \"env\", \"environment\", \"Environment (development|staging|production)\")\n \tflag.Parse() \n \tlogger := slog.New(slog.NewTextHandler(os.Stdout, nil))\n \tapp := &application{\n"
                },
                {
                    "date": 1738531420060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,9 @@\n \t\tHandler: mux,\n \t\tIdleTimeout: time.Minute,\n \t\tReadTimeout: 5 * time.Second,\n \t\tWriteTimeout: 10 * time.Second,\n+\t\tmu:\n \t\tErrorLog: slog.NewLogLogger(logger.Handler(), slog.LevelError),\n \t}\n \n \tlogger.Info(\"starting server\", \"addr\", srv.Addr, \"env\", cfg.env)\n"
                },
                {
                    "date": 1738531447790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n \t\"fmt\"\n \t\"log/slog\"\n \t\"net/http\"\n \t\"os\"\n+\t\"sync\"\n \t\"time\"\n )\n \n const version = \"1.0.0\"\n@@ -40,9 +41,9 @@\n \t\tHandler: mux,\n \t\tIdleTimeout: time.Minute,\n \t\tReadTimeout: 5 * time.Second,\n \t\tWriteTimeout: 10 * time.Second,\n-\t\tmu:\n+\t\tmu: sync.Mutex{}\n \t\tErrorLog: slog.NewLogLogger(logger.Handler(), slog.LevelError),\n \t}\n \n \tlogger.Info(\"starting server\", \"addr\", srv.Addr, \"env\", cfg.env)\n"
                },
                {
                    "date": 1738531454307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n \t\tHandler: mux,\n \t\tIdleTimeout: time.Minute,\n \t\tReadTimeout: 5 * time.Second,\n \t\tWriteTimeout: 10 * time.Second,\n-\t\tmu: sync.Mutex{}\n+\t\tmu: sync.Mutex{},\n \t\tErrorLog: slog.NewLogLogger(logger.Handler(), slog.LevelError),\n \t}\n \n \tlogger.Info(\"starting server\", \"addr\", srv.Addr, \"env\", cfg.env)\n"
                },
                {
                    "date": 1738531465240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,8 @@\n \t\"fmt\"\n \t\"log/slog\"\n \t\"net/http\"\n \t\"os\"\n-\t\"sync\"\n \t\"time\"\n )\n \n const version = \"1.0.0\"\n@@ -41,9 +40,8 @@\n \t\tHandler: mux,\n \t\tIdleTimeout: time.Minute,\n \t\tReadTimeout: 5 * time.Second,\n \t\tWriteTimeout: 10 * time.Second,\n-\t\tmu: sync.Mutex{},\n \t\tErrorLog: slog.NewLogLogger(logger.Handler(), slog.LevelError),\n \t}\n \n \tlogger.Info(\"starting server\", \"addr\", srv.Addr, \"env\", cfg.env)\n"
                },
                {
                    "date": 1738596396159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,5 +48,7 @@\n \n \terr := srv.ListenAndServe()\n \tlogger.Error(err.Error())\n \tos.Exit(1)\n-}\n\\ No newline at end of file\n+}\n+\n+//Write a HTTP Server That Displays Aspects of Your CPU's to a Blank Page \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738596407427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,5 +50,5 @@\n \tlogger.Error(err.Error())\n \tos.Exit(1)\n }\n \n-//Write a HTTP Server That Displays Aspects of Your CPU's to a Blank Page \n\\ No newline at end of file\n+//Write a HTTP Server That Displays Aspects of Your CPU's to a Page\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738596421476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,5 +50,5 @@\n \tlogger.Error(err.Error())\n \tos.Exit(1)\n }\n \n-//Write a HTTP Server That Displays Aspects of Your CPU's to a Page\n\\ No newline at end of file\n+//Write a HTTP Server That Returns Aspects of your CPU to a Page \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738599091925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n }\n \n type application struct {\n \tconfig config \n-\tlogger *slog.Logger\n+\tlogger slog.Logger\n }\n \n func main() {\n \tvar cfg config\n"
                },
                {
                    "date": 1738599097560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n \tflag.Parse() \n \tlogger := slog.New(slog.NewTextHandler(os.Stdout, nil))\n \tapp := &application{\n \t\tconfig: cfg,\n-\t\tlogger: logger,\n+\t\tlogger: &logger,\n \t}\n \n \tmux := http.NewServeMux()\n \tmux.HandleFunc(\"/v1/healthcheck\", app.healthcheckHandler)\n"
                },
                {
                    "date": 1738599112567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n }\n \n type application struct {\n \tconfig config \n-\tlogger slog.Logger\n+\tlogger *slog.Logger\n }\n \n func main() {\n \tvar cfg config\n@@ -28,9 +28,9 @@\n \tflag.Parse() \n \tlogger := slog.New(slog.NewTextHandler(os.Stdout, nil))\n \tapp := &application{\n \t\tconfig: cfg,\n-\t\tlogger: &logger,\n+\t\tlogger: *logger,\n \t}\n \n \tmux := http.NewServeMux()\n \tmux.HandleFunc(\"/v1/healthcheck\", app.healthcheckHandler)\n"
                },
                {
                    "date": 1738599123100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \tenv string\n }\n \n type application struct {\n-\tconfig config \n+\tconfig *config \n \tlogger *slog.Logger\n }\n \n func main() {\n@@ -28,9 +28,9 @@\n \tflag.Parse() \n \tlogger := slog.New(slog.NewTextHandler(os.Stdout, nil))\n \tapp := &application{\n \t\tconfig: cfg,\n-\t\tlogger: *logger,\n+\t\tlogger: logger,\n \t}\n \n \tmux := http.NewServeMux()\n \tmux.HandleFunc(\"/v1/healthcheck\", app.healthcheckHandler)\n"
                },
                {
                    "date": 1738599130637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \tenv string\n }\n \n type application struct {\n-\tconfig *config \n+\tconfig config \n \tlogger *slog.Logger\n }\n \n func main() {\n"
                },
                {
                    "date": 1738599162467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n \tflag.IntVar(&cfg.port, \"port\", 4000, \"API Server Port\")\n \tflag.StringVar(&cfg.env, \"env\", \"environment\", \"Environment (development|staging|production)\")\n \tflag.Parse() \n \tlogger := slog.New(slog.NewTextHandler(os.Stdout, nil))\n-\tapp := &application{\n+\tapp := application{\n \t\tconfig: cfg,\n \t\tlogger: logger,\n \t}\n \n"
                },
                {
                    "date": 1738599189456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n \n \tmux := http.NewServeMux()\n \tmux.HandleFunc(\"/v1/healthcheck\", app.healthcheckHandler)\n \n-\tsrv := &http.Server{\n+\tsrv := http.Server{\n \t\tAddr: fmt.Sprintf(\":%d\", cfg.port),\n \t\tHandler: mux,\n \t\tIdleTimeout: time.Minute,\n \t\tReadTimeout: 5 * time.Second,\n"
                },
                {
                    "date": 1738599409218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,19 +26,19 @@\n \tflag.IntVar(&cfg.port, \"port\", 4000, \"API Server Port\")\n \tflag.StringVar(&cfg.env, \"env\", \"environment\", \"Environment (development|staging|production)\")\n \tflag.Parse() \n \tlogger := slog.New(slog.NewTextHandler(os.Stdout, nil))\n-\tapp := application{\n+\tapp := &application{\n \t\tconfig: cfg,\n \t\tlogger: logger,\n \t}\n \n \tmux := http.NewServeMux()\n \tmux.HandleFunc(\"/v1/healthcheck\", app.healthcheckHandler)\n \n-\tsrv := http.Server{\n+\tsrv := &http.Server{\n \t\tAddr: fmt.Sprintf(\":%d\", cfg.port),\n-\t\tHandler: mux,\n+\t\tHandler: app.routes(),\n \t\tIdleTimeout: time.Minute,\n \t\tReadTimeout: 5 * time.Second,\n \t\tWriteTimeout: 10 * time.Second,\n \t\tErrorLog: slog.NewLogLogger(logger.Handler(), slog.LevelError),\n"
                },
                {
                    "date": 1738599414747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,54 @@\n+package main\n+\n+import (\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"log/slog\"\n+\t\"net/http\"\n+\t\"os\"\n+\t\"time\"\n+)\n+\n+const version = \"1.0.0\"\n+\n+type config struct {\n+\tport int \n+\tenv string\n+}\n+\n+type application struct {\n+\tconfig config \n+\tlogger *slog.Logger\n+}\n+\n+func main() {\n+\tvar cfg config\n+\tflag.IntVar(&cfg.port, \"port\", 4000, \"API Server Port\")\n+\tflag.StringVar(&cfg.env, \"env\", \"environment\", \"Environment (development|staging|production)\")\n+\tflag.Parse() \n+\tlogger := slog.New(slog.NewTextHandler(os.Stdout, nil))\n+\tapp := application{\n+\t\tconfig: cfg,\n+\t\tlogger: logger,\n+\t}\n+\n+\tmux := http.NewServeMux()\n+\tmux.HandleFunc(\"/v1/healthcheck\", app.healthcheckHandler)\n+\n+\tsrv := &http.Server{\n+\t\tAddr: fmt.Sprintf(\":%d\", cfg.port),\n+\t\tHandler: app.routes(),\n+\t\tIdleTimeout: time.Minute,\n+\t\tReadTimeout: 5 * time.Second,\n+\t\tWriteTimeout: 10 * time.Second,\n+\t\tErrorLog: slog.NewLogLogger(logger.Handler(), slog.LevelError),\n+\t}\n+\n+\tlogger.Info(\"starting server\", \"addr\", srv.Addr, \"env\", cfg.env)\n+\n+\terr := srv.ListenAndServe()\n+\tlogger.Error(err.Error())\n+\tos.Exit(1)\n+}\n+\n+//Write a HTTP Server That Returns Aspects of your CPU to a Page \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738599463143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,62 +26,8 @@\n \tflag.IntVar(&cfg.port, \"port\", 4000, \"API Server Port\")\n \tflag.StringVar(&cfg.env, \"env\", \"environment\", \"Environment (development|staging|production)\")\n \tflag.Parse() \n \tlogger := slog.New(slog.NewTextHandler(os.Stdout, nil))\n-\tapp := application{\n-\t\tconfig: cfg,\n-\t\tlogger: logger,\n-\t}\n-\n-\tmux := http.NewServeMux()\n-\tmux.HandleFunc(\"/v1/healthcheck\", app.healthcheckHandler)\n-\n-\tsrv := &http.Server{\n-\t\tAddr: fmt.Sprintf(\":%d\", cfg.port),\n-\t\tHandler: app.routes(),\n-\t\tIdleTimeout: time.Minute,\n-\t\tReadTimeout: 5 * time.Second,\n-\t\tWriteTimeout: 10 * time.Second,\n-\t\tErrorLog: slog.NewLogLogger(logger.Handler(), slog.LevelError),\n-\t}\n-\n-\tlogger.Info(\"starting server\", \"addr\", srv.Addr, \"env\", cfg.env)\n-\n-\terr := srv.ListenAndServe()\n-\tlogger.Error(err.Error())\n-\tos.Exit(1)\n-}\n-\n-//Write a HTTP Server That Returns Aspects of your CPU to a Page \n-package main\n-\n-import (\n-\t\"flag\"\n-\t\"fmt\"\n-\t\"log/slog\"\n-\t\"net/http\"\n-\t\"os\"\n-\t\"time\"\n-)\n-\n-const version = \"1.0.0\"\n-\n-type config struct {\n-\tport int \n-\tenv string\n-}\n-\n-type application struct {\n-\tconfig config \n-\tlogger *slog.Logger\n-}\n-\n-func main() {\n-\tvar cfg config\n-\tflag.IntVar(&cfg.port, \"port\", 4000, \"API Server Port\")\n-\tflag.StringVar(&cfg.env, \"env\", \"environment\", \"Environment (development|staging|production)\")\n-\tflag.Parse() \n-\tlogger := slog.New(slog.NewTextHandler(os.Stdout, nil))\n \tapp := &application{\n \t\tconfig: cfg,\n \t\tlogger: logger,\n \t}\n"
                },
                {
                    "date": 1738601784582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n \n func main() {\n \tvar cfg config\n \tflag.IntVar(&cfg.port, \"port\", 4000, \"API Server Port\")\n-\tflag.StringVar(&cfg.env, \"env\", \"environment\", \"Environment (development|staging|production)\")\n+\tflag.StringVar(&cfg.env, \"env\", \"development\", \"Environment (development|staging|production)\")\n \tflag.Parse() \n \tlogger := slog.New(slog.NewTextHandler(os.Stdout, nil))\n \tapp := &application{\n \t\tconfig: cfg,\n"
                },
                {
                    "date": 1738623886171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,12 @@\n \tlogger *slog.Logger\n }\n \n func main() {\n+\n+\ttype aux := struct {\n+\t\t\n+\t}\n \tvar cfg config\n \tflag.IntVar(&cfg.port, \"port\", 4000, \"API Server Port\")\n \tflag.StringVar(&cfg.env, \"env\", \"development\", \"Environment (development|staging|production)\")\n \tflag.Parse() \n"
                },
                {
                    "date": 1738623896389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,10 +22,10 @@\n }\n \n func main() {\n \n-\ttype aux := struct {\n-\t\t\n+\taux := struct {\n+\t\tID int\n \t}\n \tvar cfg config\n \tflag.IntVar(&cfg.port, \"port\", 4000, \"API Server Port\")\n \tflag.StringVar(&cfg.env, \"env\", \"development\", \"Environment (development|staging|production)\")\n"
                },
                {
                    "date": 1738623903311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,10 +23,12 @@\n \n func main() {\n \n \taux := struct {\n-\t\tID int\n-\t}\n+\t\tID int \n+\t\tS\n+\n+\t}{}\n \tvar cfg config\n \tflag.IntVar(&cfg.port, \"port\", 4000, \"API Server Port\")\n \tflag.StringVar(&cfg.env, \"env\", \"development\", \"Environment (development|staging|production)\")\n \tflag.Parse() \n"
                },
                {
                    "date": 1738623912269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,10 @@\n func main() {\n \n \taux := struct {\n \t\tID int \n-\t\tS\n+\t\tName string \n+\t\tDate string\n \n \t}{}\n \tvar cfg config\n \tflag.IntVar(&cfg.port, \"port\", 4000, \"API Server Port\")\n"
                },
                {
                    "date": 1738623917797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,11 @@\n \t\tID int \n \t\tName string \n \t\tDate string\n \n-\t}{}\n+\t}{\n+\t\tID: 1,\n+\t}\n \tvar cfg config\n \tflag.IntVar(&cfg.port, \"port\", 4000, \"API Server Port\")\n \tflag.StringVar(&cfg.env, \"env\", \"development\", \"Environment (development|staging|production)\")\n \tflag.Parse() \n"
                },
                {
                    "date": 1738623925743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,10 @@\n \t\tDate string\n \n \t}{\n \t\tID: 1,\n+\t\tName: \"Trent\",\n+\t\tDate: time.April.String(),\n \t}\n \tvar cfg config\n \tflag.IntVar(&cfg.port, \"port\", 4000, \"API Server Port\")\n \tflag.StringVar(&cfg.env, \"env\", \"development\", \"Environment (development|staging|production)\")\n"
                },
                {
                    "date": 1738623937969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,10 @@\n \t\tID: 1,\n \t\tName: \"Trent\",\n \t\tDate: time.April.String(),\n \t}\n+\n+\tname := aux.ID\n \tvar cfg config\n \tflag.IntVar(&cfg.port, \"port\", 4000, \"API Server Port\")\n \tflag.StringVar(&cfg.env, \"env\", \"development\", \"Environment (development|staging|production)\")\n \tflag.Parse() \n"
                },
                {
                    "date": 1738623944808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,21 +21,8 @@\n \tlogger *slog.Logger\n }\n \n func main() {\n-\n-\taux := struct {\n-\t\tID int \n-\t\tName string \n-\t\tDate string\n-\n-\t}{\n-\t\tID: 1,\n-\t\tName: \"Trent\",\n-\t\tDate: time.April.String(),\n-\t}\n-\n-\tname := aux.ID\n \tvar cfg config\n \tflag.IntVar(&cfg.port, \"port\", 4000, \"API Server Port\")\n \tflag.StringVar(&cfg.env, \"env\", \"development\", \"Environment (development|staging|production)\")\n \tflag.Parse() \n"
                }
            ],
            "date": 1738530134384,
            "name": "Commit-0",
            "content": "package main"
        }
    ]
}